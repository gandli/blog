name: Translate Markdown Posts

on:
  push:
    branches: [main]

  workflow_dispatch:
    inputs:
      file_path:
        description: "输入需要翻译的文件路径 (如：content/posts/示例.md)"
        required: false
        default: ""
      force:
        description: "强制重新翻译 (即使已存在翻译)"
        required: false
        default: "false"

jobs:
  prepare:
    name: "扫描待翻译文件"
    runs-on: ubuntu-latest
    outputs:
      files_to_translate: ${{ steps.detect.outputs.files }}
      has_files: ${{ steps.detect.outputs.has_files }}
    
    steps:
      - name: "检出代码库"
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: "设置环境变量"
        run: |
          echo "REPO_ROOT=$(pwd)" >> $GITHUB_ENV
          echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "EVENT_TYPE=${{ github.event_name }}" >> $GITHUB_ENV

      - name: "检测待处理文件"
        id: detect
        run: |
          # 设置 IFS 只处理换行符
          IFS=$'\n'
          
          # 排除规则配置
          EXCLUDE_PATTERNS=(
            "_*.md"
            "*_en.md"
          )
          
          EXCLUDE_DIRS=(
            "themes/**"
            "assets/**"
            "node_modules/**"
            ".github/**"
            "public/**"
            "resources/**"
          )

          # 处理手动触发
          if [[ "$EVENT_TYPE" == "workflow_dispatch" ]]; then
            input_file="${{ github.event.inputs.file_path }}"
            force="${{ github.event.inputs.force }}"
            
            if [[ -n "$input_file" ]]; then
              if [[ ! -f "$input_file" ]]; then
                echo "::error::文件不存在：$input_file"
                exit 1
              fi
              
              if [[ "$input_file" != *.md ]]; then
                echo "::error::仅支持 Markdown 文件：$input_file"
                exit 1
              fi

              # 处理带空格的文件名
              base="${input_file%.*}"
              en_file="${base}_en.md"

              if [[ "$force" == "true" || ! -f "$en_file" ]]; then
                echo "::notice::文件加入翻译队列：$input_file"
                # 使用 jq 的--arg 安全传递可能包含空格的文件名
                echo "files=$(jq -cn --arg file "$input_file" '[$file]')" >> "$GITHUB_OUTPUT"
                echo "has_files=true" >> "$GITHUB_OUTPUT"
                exit 0
              else
                echo "::notice::翻译文件已存在：$en_file"
                echo "files=[]" >> "$GITHUB_OUTPUT"
                echo "has_files=false" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
          fi

          # 生成 find 排除参数
          find_exclude=()
          for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            find_exclude+=(-not -name "$pattern")
          done
          
          for dir in "${EXCLUDE_DIRS[@]}"; do
            find_exclude+=(-not -path "./$dir")
          done

          # 扫描所有未翻译的 Markdown 文件
          echo "::group::扫描所有未翻译的 Markdown 文件"
          untranslated_files=()
          while IFS= read -r -d '' file; do
            # 处理带空格的文件名
            base="${file%.*}"
            en_file="${base}_en.md"
            
            if [[ ! -f "$en_file" ]]; then
              untranslated_files+=("$file")
            fi
          done < <(find . -type f -name "*.md" "${find_exclude[@]}" -print0)
          echo "::endgroup::"

          # 扫描变更的文件
          echo "::group::扫描变更的 Markdown 文件"
          changed_files=$(git diff --name-only -z HEAD^ HEAD | grep -z '\.md$' | tr '\0' '\n' || true)
          
          if [[ -z "$changed_files" ]]; then
            echo "::notice::本次提交未修改任何 Markdown 文件"
          else
            # 处理变更文件
            changed_result=()
            while IFS= read -r file; do
              # 检查排除规则
              exclude=false
              
              for pattern in "${EXCLUDE_PATTERNS[@]}"; do
                if [[ "$(basename "$file")" == $pattern ]]; then
                  exclude=true
                  break
                fi
              done
              
              for dir in "${EXCLUDE_DIRS[@]}"; do
                if [[ "$file" == "./$dir"* || "$file" == "$dir"* ]]; then
                  exclude=true
                  break
                fi
              done

              if [[ "$exclude" == "false" ]]; then
                base="${file%.*}"
                en_file="${base}_en.md"
                
                if [[ -f "$en_file" ]] && [[ $(git diff --name-only HEAD^ HEAD -- "$file") ]]; then
                  echo "::notice::检测到文件更新：$file"
                  rm -f "$en_file"
                  changed_result+=("$file")
                fi
              fi
            done <<< "$changed_files"
          fi
          echo "::endgroup::"

          # 合并结果
          result=("${untranslated_files[@]}" "${changed_result[@]}")
          # 去重并保持顺序
          unique_result=($(printf "%s\n" "${result[@]}" | awk '!seen[$0]++'))

          # 设置输出
          if [[ ${#unique_result[@]} -gt 0 ]]; then
            echo "::notice::发现 ${#unique_result[@]} 个待处理文件"
            # 安全处理带空格的文件名
            printf "%s\n" "${unique_result[@]}" | jq -R . | jq -s . | jq -c 'map(select(. != ""))' > files.json
            echo "files=$(cat files.json)" >> "$GITHUB_OUTPUT"
            echo "has_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::没有需要处理的文件"
            echo "files=[]" >> "$GITHUB_OUTPUT"
            echo "has_files=false" >> "$GITHUB_OUTPUT"
          fi

  translate:
    name: "执行翻译"
    needs: prepare
    if: needs.prepare.outputs.has_files == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: "检出代码库"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: "设置 Python 环境"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: "安装依赖"
        run: |
          python -m pip install --upgrade pip
          pip install openai python-dotenv
          echo "✔️ 依赖安装完成"

      - name: "翻译 Markdown 文件"
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
        run: |
          echo "::group::翻译处理日志"
          # 使用 jq 安全读取可能包含空格的文件名
          files_json='${{ needs.prepare.outputs.files_to_translate }}'
          echo "原始文件列表: $files_json"
          
          # 使用 jq 生成安全的 shell 数组
          mapfile -t files < <(echo "$files_json" | jq -r '.[] | @json')
          
          echo "即将处理 ${#files[@]} 个文件："
          
          for file_json in "${files[@]}"; do
            # 使用 jq 解析 JSON 字符串，保留原始路径
            file=$(echo "$file_json" | jq -r '.')
            echo "🔍 正在处理: $file"
            
            if [[ ! -f "$file" ]]; then
              echo "::error::文件不存在：$file"
              exit 1
            fi
            
            # 确保文件路径正确
            file_path="$(realpath "$file")"
            echo "完整路径: $file_path"
            
            # 执行翻译脚本
            if ! python .github/scripts/translate_markdown.py "$file_path"; then
              echo "::error::翻译失败：$file"
              exit 1
            fi
            
            echo "✅ 生成翻译: ${file%.*}_en.md"
          done
          echo "::endgroup::"

      - name: "提交翻译结果"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # 添加所有翻译文件，处理带空格的文件名
          while IFS= read -r -d '' file; do
            git add "$file"
          done < <(find . -name "*_en.md" -print0)

          if git diff --cached --quiet; then
            echo "✅ 没有需要提交的更改"
          else
            git commit -m "🌍 自动翻译: 更新英文版本 [skip ci]"
            git push origin "HEAD:${{ github.ref_name }}"
            echo "🚀 已推送翻译文件到分支 ${{ github.ref_name }}"
          fi